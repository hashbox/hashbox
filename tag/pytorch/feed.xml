<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="https://hashbox.github.io/tag/pytorch/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://hashbox.github.io/" rel="alternate" type="text/html" />
  <updated>2018-11-27T00:25:52+00:00</updated>
  <id>https://hashbox.github.io/tag/pytorch/feed.xml</id>

  
  
  

  
    <title type="html">HASHBOX | </title>
  

  
    <subtitle>빅데이터 분야에 모험가가 되고 싶은 개발자 블로그</subtitle>
  

  

  
    
      
    
      
    
  

  
  

  
    <entry>
      <title type="html">PyTorch 기본 사용법[2/2]</title>
      <link href="https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95-2-2" rel="alternate" type="text/html" title="PyTorch 기본 사용법[2/2]" />
      <published>2018-01-14T11:21:00+00:00</published>
      <updated>2018-01-14T11:21:00+00:00</updated>
      <id>https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95%5B2:2%5D</id>
      <content type="html" xml:base="https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95-2-2">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;기본적으로 PyTorch를 사용하면서 자주 쓰게 되는 메소드에 대해서 설명하고자 합니다. 기본적으로 PyTorch 도큐먼트 내용이 잘 나와있습니다. 해당 도큐먼트를 기반으로 쉽게 설명을 위해 포스팅합니다. 현재 PyTorch 0.3.0 도큐먼트 기반으로 작성합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본사용법 시리즈&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/PyTorch-기본사용법-1-2&quot;&gt;PyTorch 기본사용법 [1/2]&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PyTorch 기본사용법 [2/2] (현재글)&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텐서-조작&quot;&gt;텐서 조작&lt;/h2&gt;

&lt;h3 id=&quot;torch&quot;&gt;Torch[:,:]&lt;/h3&gt;

&lt;p&gt;텐서는 Python을 기존에 사용하시던 분들은 쉽게 이해하실 수 있으실 겁니다. 배열 인덱싱을 매트릭스로 한다고 생각하시면 될 것 같습니다. 매트릭스에서 각 요소의 위치를 ij로 나타내면서 00, 01, 10, 11과 같이 나타낸 것을 Python 인덱싱을 하듯이 하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.3348  0.0717  0.8247
 0.5290  0.6360  0.4265
 0.4244  0.2309  0.9879
 0.9493  0.7278  0.0516
[torch.FloatTensor of size 4x3]
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,:]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.3348
 0.0717
 0.8247
[torch.FloatTensor of size 3]
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.3348  0.0717
 0.5290  0.6360
[torch.FloatTensor of size 2x2]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매트릭스를 표현할 때 아무것도 아닌 빈공간을 두는 것 대신에 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;을 사용하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;로 차원을 구분하여 사용한다고 생각하면 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;torchcat&quot;&gt;torch.cat()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.cat()&lt;/code&gt;은 두개의 텐서를 이어 붙이는 메소드입니다. 그러기 위해서는 이어 붙이고자하는 차원에 따라 차원의 사이즈를 맞춰주시는 것도 잊지 마셔야합니다!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.1457  0.1454  0.9445
 0.8396  0.5484  0.9036
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.3265  0.8622  0.5800
 0.3340  0.7720  0.9725
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.1457  0.1454  0.9445
 0.8396  0.5484  0.9036
 0.3265  0.8622  0.5800
 0.3340  0.7720  0.9725
[torch.FloatTensor of size 4x3]
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.1457  0.1454  0.9445  0.3265  0.8622  0.5800
 0.8396  0.5484  0.9036  0.3340  0.7720  0.9725
[torch.FloatTensor of size 2x6]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dim=0&lt;/code&gt;을 주면 0번째 차원은 밑으로 붙습니다. 1번쨰 차원은 오른쪽으로 붙으며 2번째 차원이면 새로이 쌓이듯 이어 붙여지겠죠?&lt;/p&gt;

&lt;h3 id=&quot;torchchunk-torchsplit&quot;&gt;torch.chunk(), torch.split()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.chunk()&lt;/code&gt;는 하나의 텐서를 여러개로 나누는 메소드입니다. 첫번 째 인자로 나누고자 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor&lt;/code&gt;가 들어가며 2번째 인자로 몇개로 나눌것인지, &lt;code class=&quot;highlighter-rouge&quot;&gt;dim=n&lt;/code&gt;와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;dim&lt;/code&gt;에 어떤 차원으로 나눌것인지 명명을 해주면 됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.split()&lt;/code&gt;도 같은 역할을 하지만 정확한 사이즈로 나누어주는 역할을 합니다. 마치 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;으로 나누고 남은것을 반환해준다 생각해주시면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0.4231  0.0197  0.2480  0.6880  0.1073
 0.7987  0.4116  0.7590  0.4709  0.1713
 0.7875  0.3960  0.6544  0.0566  0.9989
 0.7098  0.0270  0.2983  0.2765  0.4520
 0.8770  0.8683  0.8228  0.3313  0.2859
 0.9922  0.2215  0.6708  0.5745  0.7009
[torch.FloatTensor of size 6x5]
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
(
  0.4231  0.0197  0.2480  0.6880  0.1073
  0.7987  0.4116  0.7590  0.4709  0.1713
  0.7875  0.3960  0.6544  0.0566  0.9989
 [torch.FloatTensor of size 3x5],
  0.7098  0.0270  0.2983  0.2765  0.4520
  0.8770  0.8683  0.8228  0.3313  0.2859
  0.9922  0.2215  0.6708  0.5745  0.7009
 [torch.FloatTensor of size 3x5])
'''&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
(
  0.4231  0.0197
  0.7987  0.4116
  0.7875  0.3960
  0.7098  0.0270
  0.8770  0.8683
  0.9922  0.2215
 [torch.FloatTensor of size 6x2],
  0.2480  0.6880
  0.7590  0.4709
  0.6544  0.0566
  0.2983  0.2765
  0.8228  0.3313
  0.6708  0.5745
 [torch.FloatTensor of size 6x2],
  0.1073
  0.1713
  0.9989
  0.4520
  0.2859
  0.7009
 [torch.FloatTensor of size 6x1])
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;torchsqueeze-torchunsqueeze&quot;&gt;torch.squeeze(), torch.unsqueeze()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.squeeze()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.unsqueeze()&lt;/code&gt;는 서로 상반된 역할을 합니다. ‘쥐어짜다’라는 느낌에서 어떤 역할을 할지 감이 오지 않으신가요? 맞습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.squeeze()&lt;/code&gt;를 할경우 차원의 사이즈가 ‘1’인 차원을 없애주며, 반대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.unsqueeze()&lt;/code&gt;는 차원의 사이즈가 ‘1’인 차원을 원하는 차원에 생성을 해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
torch.Size([4, 1, 2, 1, 3])
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;squeeze_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squeeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
torch.Size([4, 2, 3])
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;unsqueeze_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unsqueeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;squeeze_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
torch.Size([1, 4, 2, 3])
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;이번 포스트에서도 기본적으로 PyTorch에서 자주 쓰는 메소드들에 대해서 알아 보았습니다. 처음 PyTorch를 사용하는데 있어서 가장 많이 쓰이고 필요한 메소드들에 대해서 알아보았습니다. 조금이나마 모두에게 도움이 되었으면 좋겠습니다. 감사합니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한지승(Jee Seung, Han)</name>
        
        
      </author>

      

      
        <category term="develop" />
      
        <category term="pytorch" />
      

      
        <summary type="html">개요</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PyTorch 기본 사용법[1/2]</title>
      <link href="https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95-1-2" rel="alternate" type="text/html" title="PyTorch 기본 사용법[1/2]" />
      <published>2018-01-11T10:45:00+00:00</published>
      <updated>2018-01-11T10:45:00+00:00</updated>
      <id>https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95%5B1:2%5D</id>
      <content type="html" xml:base="https://hashbox.github.io/PyTorch-%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95-1-2">&lt;h1 id=&quot;개요&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;기본적으로 PyTorch를 사용하면서 자주 쓰게 되는 메소드에 대해서 설명하고자 합니다. 기본적으로 PyTorch 도큐먼트 내용이 잘 나와있습니다. 해당 도큐먼트를 기반으로 쉽게 설명을 위해 포스팅합니다. 현재 PyTorch 0.3.0 도큐먼트 기반으로 작성합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;기본사용법 시리즈&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;PyTorch 기본사용법 [1/2] (현재글)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/PyTorch-기본사용법-2-2&quot;&gt;PyTorch 기본사용법 [2/2]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;텐서-생성&quot;&gt;텐서 생성&lt;/h2&gt;

&lt;h3 id=&quot;torchtensor&quot;&gt;torch.Tensor()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.Tensor()&lt;/code&gt;는 여러 매개변수로 오버로딩이 되어있습니다. 사이즈를 넘길 경우 해당하는 사이즈의 Tensor를 생성해주며 배열을 넣을 경우 해당하는 배열의 수를 갖는 Tensor를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
1.00000e-29 *
  0.0000 -2.5244  0.0000
 -2.5244  0.0000  0.0000
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 1  2
 3  4
[torch.FloatTensor of size 2x2]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;torchrandsize&quot;&gt;torch.rand(size)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.rand()&lt;/code&gt;는 텐서를 랜덤하게 생성하는 메소드이며, 0이상 1미만의 수로 사이즈 만큼 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
0.4218  0.2046  0.8776
0.1623  0.6642  0.5808
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;매개변수로 넘긴는 차원 수 만큼 FloatTensor로 균등분포(uniform distribution)로 랜덤하게 생성되는 메소드입니다.&lt;/p&gt;

&lt;h3 id=&quot;torchrandnsize&quot;&gt;torch.randn(size)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; torch.randn()&lt;/code&gt;도 텐서를 랜덤하게 생성하는 메소드이며 0를 평균으로 갖는 수로 사이즈 만큼 생성합니다. 여기서 다른 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.rand()&lt;/code&gt;와는 다르게 정규분포(normal distribution)으로 Tensor를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
-0.9745 -1.7317  0.1979
-1.7215 -1.0405  0.2917
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uniform distribution과 Normal distribution의 차이를 알 수 있는 이미지를 보시면 쉽게 이해하실 수 있으실겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/images/distribution-graph.jpg&quot; alt=&quot;Distribution 비교 그래프&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이미지 출처 : &lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-normal-distribution-and-uniform-distribution&quot;&gt;quora.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;torchrandpermn&quot;&gt;torch.randperm(n)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.randperm()&lt;/code&gt;은 0부터 n-1만큼 배열을 무작위로 섞은 Tensor를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randperm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 3
 0
 4
 2
 1
[torch.LongTensor of size 5]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;torchzerossize&quot;&gt;torch.zeros(size)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.zeros()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;만큼의 차원을 가진 Tensor를 0으로 채워서 생성해주는 메소드입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0  0  0
 0  0  0
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;torchonessize&quot;&gt;torch.ones(size)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.ones()&lt;/code&gt;는 그럼 무엇일까요? 당연히 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;만큼의 차원을 가진 Tensor를 1로 채워서 생성해주는 메소드입니다. 쉽죠?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 1  1  1
 1  1  1
[torch.FloatTensor of size 2x3]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;torcharangestart-end-step&quot;&gt;torch.arange(start, end, step)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.arange()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;이상 &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;미만의 수로 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt;만큼의 수만큼 건너뛰는 Tensor를 생성해주는 역할을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
 0
 2
 4
 6
 8
[torch.FloatTensor of size 5]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;즉, 원하는 숫자 범위에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;step&lt;/code&gt;만큼 일정한 간격을 두는 데이터를 만들 때 사용하면 좋겠죠? 참고로 마지막으로 남아 떨어지지 않는 수는 생성하지 않는 다는 것을 명심 하셔야 될것같습니다.&lt;/p&gt;

&lt;h3 id=&quot;torchlinspacestart-end-steps&quot;&gt;torch.linspace(start, end, steps)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.linspace()&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.arange()&lt;/code&gt;하고의 차이를 헷갈리시는 분들도 계실 겁니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.linspace()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;start&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;사이의 수로 &lt;code class=&quot;highlighter-rouge&quot;&gt;steps&lt;/code&gt;수 만큼 일정한 간격을 갖는 수를 생성해주는 역할을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
  0.0000
  1.4286
  2.8571
  4.2857
  5.7143
  7.1429
  8.5714
 10.0000
[torch.FloatTensor of size 8]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;numpy타입과-tensor타입의-호환&quot;&gt;Numpy타입과 Tensor타입의 호환&lt;/h2&gt;

&lt;h3 id=&quot;torchfrom_numpyx&quot;&gt;torch.from_numpy(x)&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.from_numpy(x)&lt;/code&gt;는 numpy로 만든 데이터를 PyTorch에서 사용이 가능한 Tensor로 변환해주는 메소드입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;numpy_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tensor_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tensornumpy&quot;&gt;Tensor.numpy()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor.numpy()&lt;/code&gt;는 Tensor 타입의 데이터를 numpy 타입의 데이터로 바꾸는 메소드입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;numpy_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tensor_data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;그-외&quot;&gt;그 외&lt;/h2&gt;

&lt;h3 id=&quot;tensorcuda&quot;&gt;Tensor.cuda()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor.cuda()&lt;/code&gt;는 GPU연산을 지원하는 디바이스에서 GPU연산용으로 변환하기 위한 메소드입니다. &lt;strong&gt;&lt;em&gt;단, 사용시 &lt;code class=&quot;highlighter-rouge&quot;&gt;torch.cuda.is_available()&lt;/code&gt;로 디바이스가 GPU연산이 가능한지 확인하고 사용할 수 있도록 하는 것이 좋습니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cuda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;tensorsize&quot;&gt;Tensor.size()&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor.size()&lt;/code&gt;는 해당하는 텐서의 사이즈를 확인할 수 있는 메소드입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
torch.Size([2, 3])
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Tensor.size(n-dim)&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;n-dim&lt;/code&gt;의 매개변수로 차원의 인덱스를 넘겨주면 해당하는 차원의 크기를 알아올 수도 있습니다.&lt;/p&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;기본적으로 PyTorch에서 자주 쓰는 메소드들에 대해서 알아 보았습니다. 이것 외에도 Tensor끼리 나누고 붙이고하는 메소드나 차원을 줄이고하는 메소드들에 대해서는 다음시간에 알아보도록 하겠습니다. 조금이나마 모두에게 도움이 되었으면 좋겠습니다. 감사합니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한지승(Jee Seung, Han)</name>
        
        
      </author>

      

      
        <category term="develop" />
      
        <category term="pytorch" />
      

      
        <summary type="html">개요</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">PyTorch에 관하여</title>
      <link href="https://hashbox.github.io/PyTorch%EA%B4%80%ED%95%98%EC%97%AC" rel="alternate" type="text/html" title="PyTorch에 관하여" />
      <published>2018-01-08T10:18:00+00:00</published>
      <updated>2018-01-08T10:18:00+00:00</updated>
      <id>https://hashbox.github.io/PyTorch%EA%B4%80%ED%95%98%EC%97%AC</id>
      <content type="html" xml:base="https://hashbox.github.io/PyTorch%EA%B4%80%ED%95%98%EC%97%AC">&lt;h1 id=&quot;pytorch에-관하여&quot;&gt;PyTorch에 관하여&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;기존 딥러닝 라이브러리를 Google의 Tensorflow를 사용했었습니다. &lt;del&gt;많이 사용해본 것은 아닙니다ㅠ&lt;/del&gt; 그러던 중 PyTorch라는 새로운 라이브러리를 알게 되었고 조금씩 공부해가면서 충분히 매리트가 더 있다는게 느껴졌습니다. 그래서 공부하며 정리한 내용을 포스팅할 예정입니다. 아직은 미숙한 내용이나 틀린 내용이 있을 수 있습니다. 수정해야할 내용이 보인다면 알려주시면 감사하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;python-first&quot;&gt;Python First&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://pytorch.org/about/&quot;&gt;PyTorch&lt;/a&gt;에서 확인을 할 수 있듯이 PyTorch에서 가장 강조하는 부분은 &lt;strong&gt;“Python first”&lt;/strong&gt;입니다. 기존에 사용하던 Tensorflow와는 다르게 PyTorch는 Python에 친화적입니다. Tensorflow는 대부분의 라이브러리가 C/C++로 구현이 되어있고 인터페이스를 통해 Python에서 돌아가고 있습니다. 반면에, PyTorch는 텐서연산(C/C++구현)을 제외하고는 직접 구현되어있다 합니다. 그렇기 때문에 다른 Python의 다른 패키지 사용이 자유롭습니다.&lt;/p&gt;

&lt;h2 id=&quot;직관적인-흐름&quot;&gt;직관적인 흐름&lt;/h2&gt;

&lt;p&gt;Tensorflow와는 다르다고 느꼈던 점은 네트워크를 구성할 때 구성하는 내용의 흐름이 보인다는 것입니다. 단계적으로 어떤 네트워크를 사용했고, 어떤 활성화 함수를 적용했으며, 순서가 어떻게 되는지 직관적으로 한번에 이해할 수 있었습니다. 현재는 &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.Sequencial()&lt;/code&gt; 함수를 통해 순서를 정해주거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.Module&lt;/code&gt;을 상속받은 클래스 내에 &lt;code class=&quot;highlighter-rouge&quot;&gt;forward()&lt;/code&gt; 함수를 오버라이딩해서 네트워크가 어떻게 구성되었는지 알 수 있습니다. 결론적으로는 직관적인 흐름으로 표현이 가능하고, 코드가 간결하기 때문에 구현하는데 있어서 다른 프레임워크들 보다 엄청난 장점으로 작용합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아직까지는 이 두가지 방법이 어떻게 다르며, 어쩔때 사용하는 것이 좋은지 아니면 단순 구현방법의 차이인지 더 자세히 알아보고 내용을 추가하도록 하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;내용-추가&quot;&gt;내용 추가&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;기능상 &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.Sequencial()&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;forward()&lt;/code&gt;하고의 차이점은 크게 없으나 &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.Sequencial()&lt;/code&gt;과 같은 경우에는 레이어와 레이어 사이에 중간처리가 필요하지 않은 작업일 경우 사용해도 무방하지만, 예를들어 레이어와 레이어 사이에 차원의 변경이 필요한다든지(&lt;code class=&quot;highlighter-rouge&quot;&gt;view()&lt;/code&gt;와 같은 작업이라든지) 중간처리가 필요할 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;forward()&lt;/code&gt;에서 작업을 해야하는 부분 때문에 필요한걸 확인했습니다. 위와같은 문제 이외에는 어떠한 부분으로 구현을 하는지에 대한 부분은 개인의 취향에 따라 결정하시면 될 것 같습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;그래디언트를-자동-계산&quot;&gt;그래디언트를 자동 계산&lt;/h2&gt;

&lt;p&gt;Tensorflow와는 다르게 PyTorch는 Tensor 변수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.autograd&lt;/code&gt;패키지 안에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Variable()&lt;/code&gt;이라는 함수로 wrapping하여 사용합니다. 이는 Tensor의 변화를 자동으로 기록하고 그래디언트를 자동으로 계산해주는 역할을 해줍니다.&lt;/p&gt;

&lt;h2 id=&quot;빠른-연산속도&quot;&gt;빠른 연산속도&lt;/h2&gt;

&lt;p&gt;PyTorch는 다른 프레임워크들보다 메모리를 효율적으로 사용하기 때문이라고 합니다. 뿐만아니라 DCG(Dynamic Computation Graph)를 지원하기 때문에 CPU연산에서는 &lt;em&gt;10배&lt;/em&gt;, GPU연산에서 &lt;em&gt;100배&lt;/em&gt; 의 차이를 보인다고 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;마치며&quot;&gt;마치며&lt;/h1&gt;

&lt;p&gt;이번 포스팅에는 간단하게 PyTorch에 장점에 대해서 알아보았습니다. PyTorch를 공부하면서 Tensorflow보다 더 직관적이고 빠른 성능에 더 깊이있게 공부하고 싶다는 생각이 들었습니다. 다음에는 더 자세한 내용으로 찾아 뵙겠습니다. 감사합니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>한지승(Jee Seung, Han)</name>
        
        
      </author>

      

      
        <category term="develop" />
      
        <category term="pytorch" />
      

      
        <summary type="html">PyTorch에 관하여</summary>
      

      
      
    </entry>
  
</feed>
